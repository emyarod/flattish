// main: ../flattish.scss

#header {
  height: 223px;
  border: 0;
  margin-bottom: 15px;
  background: transparent !important;
}

@if $random-header {
  // header image when logged in
  // fallback image for logged out users in content.scss
  input[name=uh] {
    ~ a::after {
      position: absolute;
      top: -40px;
      right: -16px;
      z-index: -1;
      width: 100vw;

      @if $header-large {
        height: 420px;
      } @else {
        height: 223px;
      }

      content: '';
      pointer-events: none;
      background-attachment: scroll, fixed;
    }

    // declare lists
    $header-images: ();
    $group: ();
    $selectors: ();

    // 47 total values for random, rotating header
    $values: ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9','aa','ab','ac','ad','ae','af','ag','ah','ai','aj','ak');

    // number of values assigned to each header
    $values-per-header: floor(length($values) / $num-header-images);

    // remainder of values after division
    $remainder: (length($values) - ($num-header-images * $values-per-header));

    // least common multiple
    $lcm: ($num-header-images * $values-per-header);

    // populate header-images list
    @for $i from 1 through $num-header-images {
      $header-images: append($header-images, unquote('header#{$i}'), comma);
    }

    // assign a header image to each header image group
    $counter: 1;
    @for $i from 1 through $num-header-images {

      // assign values for each group
      @for $counter from $counter through ($values-per-header * $i) {
        $group: append($group, nth($values, $counter), comma);
      }

      // assign selectors for each group
      @for $a from 1 through length($group) {
        $selectors: append($selectors, unquote('&[value$="#{nth($group, $a)}"] ~ a::after'), comma);
      }

      // assign selectors for remainder
      @if $remainder > 0 {
        $selectors: append($selectors, unquote('&[value$="#{nth($values, ($lcm + $remainder))}"] ~ a::after'), comma);
      }

      // styles
      #{$selectors} {
        background-image: $scrim,url(%%#{nth($header-images, $i)}%%);
      };

      // clear lists for next iteration
      $group: ();
      $selectors: ();

      // increment counter
      $counter: ($counter + $values-per-header);

      // decrement remainder
      $remainder: $remainder - 1;
    }
  }
}

@import "header/sr-bar";
@import "header/header-bottom-right";
@import "header/header-bottom-left";
